{"ast":null,"code":"var _jsxFileName = \"C:\\\\reactcourse\\\\nortwind-redux-master2\\\\src\\\\components\\\\categories\\\\AddOrUpdateCategory.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getCategories, saveCategory } from \"../../redux/actions/categoryActions\";\nimport CategoryDetail from \"./CategoryDetail\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddorUpdateCategory({\n  categories,\n  getCategories,\n  saveCategory,\n  history,\n  ...props\n}) {\n  _s();\n\n  const [category, setCategory] = useState({ ...props.category\n  });\n  const [errors, setErrors] = useState({});\n  useEffect(() => {\n    /*  if (categories.length === 0) {\r\n          getCategories();\r\n      }\r\n      */\n    setCategory({ ...props.category\n    });\n  }, [props.category]);\n\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setCategory(previousCategory => ({ ...previousCategory,\n      [name]: value\n    }));\n    setErrors(previosErrors => ({ ...previosErrors,\n      [name]: value === \"\" ? name + \" Olmalıdır\" : undefined\n    }));\n\n    if (name === \"categoryName\" && getCategoryByName(value)) {\n      setErrors(previosErrors => ({ ...previosErrors,\n        categoryName: \"Aynı Category İsmi Daha önceden Eklenmiş\"\n      }));\n    }\n  }\n\n  function handleSave(event) {\n    event.preventDefault();\n\n    if (errors.length > 0) {\n      alert(\"Hataları çözmeden kaydedemezsiniz\");\n      return;\n    }\n\n    setCategory(category).then(() => {\n      history.push(\"/\");\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(CategoryDetail, {\n    category: category,\n    onChange: handleChange,\n    onSave: handleSave,\n    errors: errors\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddorUpdateCategory, \"CNOhhdkOjF8akzvkFiV39EhwHqc=\");\n\n_c = AddorUpdateCategory;\nexport function getCategoryById(categories, categoryId) {\n  let category = categories.find(p => p.id === parseInt(categoryId, 10)) || null;\n  return category;\n}\nexport function getCategoryByName(categories, categoryName) {\n  let category = categories.find(p => p.categoryName === categoryName) || null;\n  return category;\n}\n\nfunction mapStateToProps(state, ownProps) {\n  const categoryId = ownProps.match.params.categoryId; //string geliyormus\n\n  const category = categoryId && state.categoryListReducer.length > 0 ? getCategoryById(state.categoryListReducer, categoryId) : {};\n  return {\n    category,\n    categories: state.categoryListReducer\n  };\n}\n\nconst mapDispacthToProps = {\n  getCategories,\n  saveCategory\n};\nexport default connect(mapStateToProps, mapDispacthToProps)(AddorUpdateCategory);\n\nvar _c;\n\n$RefreshReg$(_c, \"AddorUpdateCategory\");","map":{"version":3,"sources":["C:/reactcourse/nortwind-redux-master2/src/components/categories/AddOrUpdateCategory.js"],"names":["React","useEffect","useState","connect","getCategories","saveCategory","CategoryDetail","AddorUpdateCategory","categories","history","props","category","setCategory","errors","setErrors","handleChange","event","name","value","target","previousCategory","previosErrors","undefined","getCategoryByName","categoryName","handleSave","preventDefault","length","alert","then","push","getCategoryById","categoryId","find","p","id","parseInt","mapStateToProps","state","ownProps","match","params","categoryListReducer","mapDispacthToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getCategories,saveCategory } from \"../../redux/actions/categoryActions\"\r\nimport CategoryDetail from \"./CategoryDetail\";\r\n\r\nfunction AddorUpdateCategory({\r\n    categories,\r\n    getCategories,\r\n    saveCategory,\r\n    history,\r\n    ...props\r\n}) {\r\n\r\n    const [category, setCategory] = useState({ ...props.category });\r\n    const [errors, setErrors] = useState({});\r\n\r\n    useEffect(() => {\r\n      /*  if (categories.length === 0) {\r\n            getCategories();\r\n        }\r\n        */\r\n        setCategory({ ...props.category });\r\n    }, [props.category]);\r\n\r\n    function handleChange(event) {\r\n        const { name, value } = event.target;\r\n       \r\n        setCategory(previousCategory => ({ ...previousCategory,\r\n            [name]:  value\r\n        }))\r\n\r\n        setErrors(previosErrors => ({\r\n            ...previosErrors,\r\n            [name] : value === \"\" ? name+ \" Olmalıdır\" :  undefined\r\n        }))\r\n\r\n        if(name === \"categoryName\" && getCategoryByName(value))\r\n        {\r\n            setErrors(previosErrors => ({\r\n                ...previosErrors,\r\n                categoryName: \"Aynı Category İsmi Daha önceden Eklenmiş\"\r\n            }))\r\n        }\r\n\r\n    }\r\n\r\n    function handleSave(event) {\r\n        event.preventDefault();\r\n        \r\n        if(errors.length > 0)\r\n        {\r\n            alert(\"Hataları çözmeden kaydedemezsiniz\");\r\n            return;\r\n        }\r\n\r\n        setCategory(category).then(() => {\r\n            history.push(\"/\");\r\n        })\r\n    }\r\n\r\n    return (\r\n        <CategoryDetail             \r\n        category = {category} \r\n        onChange = {handleChange}\r\n        onSave = {handleSave}\r\n        errors = {errors}>\r\n\r\n        </CategoryDetail>\r\n    );\r\n}\r\n\r\nexport function getCategoryById(categories, categoryId)\r\n{\r\n    let category = categories.find(p => p.id ===  parseInt(categoryId, 10)) || null;\r\n    return category;\r\n}\r\n\r\nexport function getCategoryByName(categories, categoryName)\r\n{\r\n    let category = categories.find(p => p.categoryName ===  categoryName) || null;\r\n    return category;\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps) { \r\n    const categoryId = ownProps.match.params.categoryId;//string geliyormus\r\n    const category = categoryId && state.categoryListReducer.length > 0 ? getCategoryById(state.categoryListReducer, categoryId) : {};\r\n\r\n    return {\r\n        category,\r\n        categories: state.categoryListReducer\r\n    }\r\n}\r\n\r\nconst mapDispacthToProps = {\r\n    getCategories, saveCategory\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispacthToProps)(AddorUpdateCategory);"]},"metadata":{},"sourceType":"module"}