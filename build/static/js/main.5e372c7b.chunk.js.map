{"version":3,"sources":["components/card/cardBackButton.js","redux/actions/actionTypes.js","redux/actions/cartActions.js","components/card/cardSummary.js","components/navi/Navi.js","redux/actions/categoryActions.js","redux/actions/productAction.js","components/categories/CategoryList.js","components/product/ProductList.js","components/root/Dashboard.js","components/card/cartDetails.js","components/root/App.js","reportWebVitals.js","redux/reducers/intialState.js","redux/reducers/index.js","redux/reducers/changeCategoryReducer.js","redux/reducers/categoryListReducer.js","redux/reducers/productListReducer.js","redux/reducers/cartReducer.js","redux/reducers/changeBackBtRedurcer.js","index.js","redux/reducers/configureStore.js"],"names":["BackButton","Button","hidden","this","props","isShow","color","size","to","Component","connect","state","changeBackBtRedurcer","CHANGE_CATEGORY","GET_CATEGORIES_SUCCESS","GET_PRODUCTS_SUCCESS","ADD_TO_CARD","REMOVE_FORM_CARD","SHOW_HIDE_BACKBT","addToCart","cartItem","type","actionTypes","payload","removeFromCart","product","CartSummary","removeCard","actions","removeFromCard","alertify","error","productName","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","cart","length","DropdownMenu","right","map","cartitem","DropdownItem","Row","Col","xs","onClick","e","Alert","quantity","id","divider","renderSummary","renderEmpty","cartReducer","dispatch","bindActionCreators","cartAction","Navi","useState","isOpen","setIsOpen","Navbar","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","className","NavbarText","changeCategory","category","getCategories","fetch","then","response","json","result","getProducts","categoryid","url","CategoryList","selectCategory","ListGroup","categories","item","ListGroupItem","active","currentCategory","categoryName","changeCategoryReducer","categoryListReducer","categoryAction","productAction","ProductList","addToCard","success","Table","responsive","products","scope","categoryId","quantityPerUnit","unitPrice","unitsInStock","productListReducer","cardAction","Dashboard","sm","CartDetails","OnDeleteCart","App","Container","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","backBtState","rootReducer","combineReducers","intialState","action","additem","find","c","newState","Object","assign","console","log","newstate2","filter","ReactDOM","render","StrictMode","store","createStore","applyMiddleware","thunk","document","getElementById"],"mappings":"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","file":"static/js/main.5e372c7b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nclass BackButton extends Component {\r\n    render() { \r\n        return <div>\r\n           <Button hidden={this.props.isShow} color=\"info\" size=\"sm\"><Link to={\"/\"}>  Geri </Link></Button> \r\n        </div>;\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n   \r\n    return {\r\n            isShow: state.changeBackBtRedurcer\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(BackButton)\r\n","export const CHANGE_CATEGORY=\"CHANGE_CATEGORY\"\nexport const GET_CATEGORIES_SUCCESS=\"GET_CATEGORIES_SUCCESS\"\nexport const GET_PRODUCTS_SUCCESS=\"GET_PRODUCTS_SUCCESS\"\nexport const ADD_TO_CARD=\"ADD_TO_CARD\"\nexport const REMOVE_FORM_CARD=\"REMOVE_FORM_CARD\"\nexport const SHOW_HIDE_BACKBT=\"SHOW_HIDE_BACKBT\"","import * as actionTypes from \"./actionTypes\"\r\n\r\nexport function addToCart(cartItem){\r\n    return {\r\n        type: actionTypes.ADD_TO_CARD,\r\n        payload: cartItem\r\n    }\r\n}\r\n\r\nexport function removeFromCart(product)\r\n{\r\n    return {\r\n        type: actionTypes.REMOVE_FORM_CARD,\r\n        payload: product\r\n    }\r\n}\r\n\r\nexport function backButtonShowStateCart(isShow)\r\n{\r\n    debugger;\r\n    return {\r\n        type: actionTypes.SHOW_HIDE_BACKBT,\r\n        payload: isShow\r\n    }\r\n}\r\n\r\n","import alertify from 'alertifyjs';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Alert, Button, Col, DropdownItem, DropdownMenu, DropdownToggle, NavItem, NavLink, Row, UncontrolledDropdown } from 'reactstrap';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as cartAction from \"../../redux/actions/cartActions\";\r\n\r\nclass CartSummary extends Component {\r\n    renderEmpty() {\r\n        return (\r\n            <NavItem>\r\n                <NavLink>Sepetiniz Boş</NavLink>\r\n            </NavItem>\r\n        )\r\n    }\r\n\r\n    removeCard = (product) => {\r\n        this.props.actions.removeFromCard(product);\r\n        alertify.error(product.productName + \" sepetden silindi\");\r\n        debugger;\r\n    }\r\n   \r\n   \r\n    renderSummary() {\r\n\r\n        return (\r\n            <UncontrolledDropdown nav inNavbar>\r\n                <DropdownToggle nav caret>\r\n                    {this.props.cart.length}' ürün Ekli\r\n                </DropdownToggle>\r\n                <DropdownMenu right>\r\n                    {\r\n                        this.props.cart.map(cartitem => (\r\n\r\n                            <DropdownItem key={cartitem.product.id} >\r\n                                <Row>\r\n                                    <Col xs=\"2\">\r\n                                        <Button color=\"danger\" size=\"sm\" onClick={(e) => this.removeCard(cartitem.product)}>X</Button>\r\n                                    </Col>\r\n                                    <Col xs=\"10\">\r\n                                        <Alert color=\"primary\">{cartitem.product.productName} {cartitem.quantity}</Alert>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </DropdownItem>\r\n                        ))\r\n                    }\r\n\r\n\r\n\r\n                    <DropdownItem divider />\r\n                    <DropdownItem>\r\n                        <Link to=\"/Card\"> Sepete Git </Link>\r\n                    </DropdownItem>\r\n                </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            {\r\n                this.props.cart.length > 0 ? this.renderSummary() : this.renderEmpty()\r\n            }\r\n\r\n        </div>;\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        cart: state.cartReducer\r\n    }\r\n}\r\n\r\n//operasyonları redux almak için\r\nfunction mapDispacthToProps(dispatch) {\r\n    return {\r\n        actions: {\r\n            removeFromCard: bindActionCreators(cartAction.removeFromCart, dispatch)\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispacthToProps)(CartSummary)","import React, { useState } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  NavbarText\n} from 'reactstrap';\nimport BackButton from '../card/cardBackButton';\nimport CartSummary from '../card/cardSummary';\n\nconst Navi = (props) => {\n  \n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n  \n\n \n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"/\">reactstrap</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"/components/\">Components</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink>\n            </NavItem>\n            <CartSummary></CartSummary>\n          </Nav>\n          <NavbarText>\n            <BackButton/>\n            \n          </NavbarText>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\n\nexport default Navi;\n","import * as actionTypes from \"./actionTypes\"\n\nexport function changeCategory(category) {\n    return {\n        type: actionTypes.CHANGE_CATEGORY,\n        payload: category\n    }\n}\n\nexport function getCategoriesSuccess(categories)\n{\n    return {\n        type: actionTypes.GET_CATEGORIES_SUCCESS,\n        payload: categories\n    }\n}\n\n\nexport function getCategories() {\n    return function (dispatch) {\n        let url = \"http://localhost:3000/categories\";\n     \n        return fetch(url)\n               .then(response => response.json())\n               .then(result => dispatch(getCategoriesSuccess(result)))\n    }\n}","import * as actionTypes from \"./actionTypes\"\r\n\r\n\r\nexport function getProductsSuccess(produts)\r\n{\r\n    return {\r\n        type: actionTypes.GET_PRODUCTS_SUCCESS,\r\n        payload: produts\r\n    }\r\n}\r\n\r\n\r\nexport function getProducts(categoryid) {\r\n    return function (dispatch) {\r\n        let url = \"http://localhost:3000/products\";\r\n        if(categoryid)\r\n        {\r\n            url = url +\"?categoryId=\"+categoryid;\r\n        }\r\n\r\n        return fetch(url)\r\n               .then(response => response.json())\r\n               .then(result => dispatch(getProductsSuccess(result)))\r\n    }\r\n}","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Alert, ListGroup, ListGroupItem } from \"reactstrap\";\nimport { bindActionCreators } from \"redux\"\nimport * as categoryAction from \"../../redux/actions/categoryActions\"\nimport * as productAction from \"../../redux/actions/productAction\"\n\nclass CategoryList extends Component {\n    //companent init fonksiyonu\n    componentDidMount() {\n\n        this.props.actions.getCategories()\n    }\n\n    selectCategory = category => {\n        this.props.actions.changeCategory(category);\n        this.props.actions.getProducts(category.id);\n    }\n\n    render() {\n        return (\n            <div>\n                <Alert color=\"warning\">\n                    Categories\n                </Alert >\n                <ListGroup>\n                    {\n                        this.props.categories.map(item => (\n\n                            <ListGroupItem active={this.props.currentCategory.categoryName === item.categoryName}\n                                key={item.id} onClick={() => this.selectCategory(item)}>\n                                {item.categoryName}\n                            </ListGroupItem>\n                        ))\n                    }\n                </ListGroup>\n            </div>\n        )\n    }\n}\n\n//stateleri redux almak için \nfunction mapStateToProps(state) {\n    return {\n        currentCategory: state.changeCategoryReducer,\n        categories: state.categoryListReducer\n    }\n}\n\n//operasyonları redux almak için\nfunction mapDispacthToProps(dispatch) {\n    return {\n        actions: {\n            getCategories: bindActionCreators(categoryAction.getCategories, dispatch),\n            changeCategory: bindActionCreators(categoryAction.changeCategory, dispatch),\n            getProducts: bindActionCreators(productAction.getProducts, dispatch)\n        }\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispacthToProps)(CategoryList)","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Alert, Button, Table } from \"reactstrap\";\nimport { bindActionCreators } from \"redux\";\nimport * as productAction from \"../../redux/actions/productAction\"\nimport * as cardAction from \"../../redux/actions/cartActions\"\nimport alertify from \"alertifyjs\"\n    \nclass ProductList extends Component {\n    componentDidMount() {\n        this.props.actions.getProducts();\n    }\n    \n    addToCard = (product) =>{\n        this.props.actions.addToCard({quantity:1,product:product});\n        alertify.success(product.productName+\" sepete eklendi\");\n    }\n\n    render() {\n        return (\n            <div>\n                <Alert color=\"warning\">\n                    {this.props.currentCategory.categoryName}\n                </Alert >\n                <Table responsive>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>categoryId</th>\n                            <th>productName</th>\n                            <th>quantityPerUnit</th>\n                            <th>unitPrice</th>\n                            <th>unitsInStock</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.props.products.map(item => (\n                                <tr key={item.id}>\n                                    <th scope=\"row\">{item.id}</th>\n                                    <td>{item.categoryId}</td>\n                                    <td>{item.productName}</td>\n                                    <td>{item.quantityPerUnit}</td>\n                                    <td>{item.unitPrice}</td>\n                                    <td>{item.unitsInStock}</td>\n                                    <td><Button color=\"success\" size=\"sm\" onClick={(e)=>this.addToCard(item)}>+</Button></td>\n                                </tr>\n                            ))\n                        }\n\n\n                    </tbody>\n                </Table>\n            </div>\n        )\n    }\n}\n\n//stateleri redux almak için \nfunction mapStateToProps(state) {\n    return {\n        currentCategory: state.changeCategoryReducer,\n        products: state.productListReducer\n    }\n}\n\n//operasyonları redux almak için\nfunction mapDispacthToProps(dispatch) {\n    return {\n        actions: {\n            getProducts: bindActionCreators(productAction.getProducts, dispatch),\n            addToCard: bindActionCreators(cardAction.addToCart, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispacthToProps)(ProductList)","import React, { Component } from \"react\";\nimport { Col, Row } from \"reactstrap\";\nimport CategoryList from \"../categories/CategoryList\";\nimport ProductList from \"../product/ProductList\";\n\nexport default class Dashboard extends Component {\n\n    render() {\n\n        \n\n        return (\n            <div>\n                <Row>\n                    <Col sm=\"3\" >\n                        <CategoryList></CategoryList>\n                    </Col>\n                    <Col sm=\"9\" >\n                        <ProductList></ProductList>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}","import { connect } from \"react-redux\";\r\nimport { Button, Table } from \"reactstrap\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport React, { Component } from 'react';\r\nimport * as cartAction from \"../../redux/actions/cartActions\";\r\nimport alertify from \"alertifyjs\";\r\n\r\n\r\nclass CartDetails extends Component {\r\n    \r\n    OnDeleteCart =  (product) => {\r\n\r\n        this.props.actions.removeFromCard(product);\r\n        alertify.error(product.productName+\" sepetden silindi\");\r\n    }\r\n    \r\n\r\n    render() {\r\n        return <div>\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>Product Name</th>\r\n                        <th>Unit Price</th>\r\n                        <th>Quantity</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        this.props.cart.map(cartitem => (\r\n\r\n                            <tr key={cartitem.product.id}>\r\n                                <th scope=\"row\">{cartitem.product.productName}</th>\r\n                                <td>{cartitem.product.unitPrice}</td>\r\n                                <td>{cartitem.quantity}</td>\r\n                                <td><Button color=\"danger\" onClick={()=>this.OnDeleteCart(cartitem.product)} >X</Button></td>\r\n                            </tr>\r\n                        ))\r\n                    }\r\n\r\n                </tbody>\r\n            </Table>\r\n        </div>;\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        cart: state.cartReducer\r\n    }\r\n}\r\n\r\n//operasyonları redux almak için\r\nfunction mapDispacthToProps(dispatch) {\r\n    return {\r\n        actions: {\r\n            removeFromCard: bindActionCreators(cartAction.removeFromCart, dispatch)\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispacthToProps)(CartDetails)","import React from 'react'\nimport { Route, Switch } from 'react-router';\nimport { Container } from 'reactstrap';\nimport { useLocation } from 'react-router-dom';\n\nimport Navi from \"../navi/Navi\";\nimport Dashboard from './Dashboard';\nimport CartDetails from '../card/cartDetails';\n\nfunction App() {\n  return (\n    <Container>\n      <Navi></Navi>\n      <Switch>\n        <Route path=\"/\" exact component={Dashboard}></Route>,\n        <Route path=\"/product\" exact component={Dashboard}></Route>\n        <Route path=\"/cart\" exact component={CartDetails}></Route>\n      </Switch>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default {\n    currentCategory:{ categoryName : \"Beverages\" },\n    categories : [],\n    products : [],\n    cart : [],\n    backBtState : true\n}","import { combineReducers } from \"redux\";\nimport categoryListReducer from \"./categoryListReducer\";\nimport changeCategoryReducer from \"./changeCategoryReducer\";\nimport productListReducer from \"./productListReducer\";\nimport cartReducer from \"./cartReducer\";\nimport changeBackBtRedurcer from \"./changeBackBtRedurcer\";\n\nconst rootReducer = combineReducers({\n    changeCategoryReducer:changeCategoryReducer,\n    categoryListReducer: categoryListReducer,\n    productListReducer :productListReducer,\n    cartReducer : cartReducer,\n    changeBackBtRedurcer : changeBackBtRedurcer\n});\n\nexport default rootReducer;","import * as actionTypes from \"../actions/actionTypes\"\nimport intialState from \"./intialState\";\n\nexport default function changeCategoryReducer(state = intialState.currentCategory,action)\n{\n    switch (action.type) {\n        case actionTypes.CHANGE_CATEGORY:\n            return action.payload;\n                \n        default:\n            return state;\n    }\n}","import * as actionTypes from \"../actions/actionTypes\"\nimport intialState from \"./intialState\";\n\nexport default function categoryListReducer(state = intialState.categories,action)\n{\n   \n    switch (action.type) {\n        case actionTypes.GET_CATEGORIES_SUCCESS:\n            debugger;\n            return action.payload;\n                \n        default:\n            return state;\n    }\n}\n//reducular state yönetiminin yapıldıgı yerdir.","import * as actionTypes from \"../actions/actionTypes\"\r\nimport intialState from \"./intialState\";\r\n\r\nexport default function productListReducer(state = intialState.products,action)\r\n{\r\n   \r\n    switch (action.type) {\r\n        case actionTypes.GET_PRODUCTS_SUCCESS:\r\n       \r\n            return action.payload;\r\n                \r\n        default:\r\n            return state;\r\n    }\r\n}","import * as actionTypes from \"../actions/actionTypes\"\r\nimport intialState from \"./intialState\";\r\n\r\nexport default function cartReducer(state = intialState.cart, action) {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_TO_CARD:\r\n            var additem = state.find(c => c.product.id === action.payload.product.id);\r\n            if (additem) {\r\n\r\n               var newState = state.map(cartitem =>{\r\n                     if(cartitem.product.id === action.payload.product.id)\r\n                    {      return Object.assign({},additem,{quantity:additem.quantity + 1})\r\n                    }     \r\n\r\n                    return  cartitem;\r\n               }); \r\n                console.log(\"Ekli olan sayısı artırdlı\");\r\n                return newState;\r\n            }   \r\n            else {\r\n                console.log(\"eklendi\");\r\n                return [...state,{...action.payload}];\r\n            }  \r\n        \r\n        case actionTypes.REMOVE_FORM_CARD:\r\n            debugger;\r\n            var newstate2 = state.filter(c => c.product.id !== action.payload.id);\r\n            return newstate2;\r\n\r\n             \r\n        default:\r\n            return state;\r\n               \r\n      }  \r\n} ","import * as actionTypes from \"../actions/actionTypes\"\r\nimport intialState from \"./intialState\";\r\n\r\nexport default function changeBackBtRedurcer(state = intialState.backBtState,action)\r\n{\r\n  \r\n    switch (action.type) { \r\n        case actionTypes.SHOW_HIDE_BACKBT:\r\n            debugger;\r\n            return action.payload;\r\n                \r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/root/App';\n\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport configureStore from './redux/reducers/configureStore';\nimport \"../node_modules/alertifyjs/build/css/alertify.min.css\"\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <Provider store={configureStore()}>\n    <App />\n    </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"./index\"\nimport thunk from \"redux-thunk\";\n\nexport default function configureStore(){\n    return createStore(rootReducer,applyMiddleware(thunk));\n}"],"sourceRoot":""}